{"ast":null,"code":"var _jsxFileName = \"/Users/jeetyadav/Downloads/quiz-app-main/src/components/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Question from './Question';\nimport ProgressBar from './ProgressBar';\nimport questionsData from '../questions.json';\nimport './QuizPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [timePerQuestion] = useState(30);\n  const [timeRemaining, setTimeRemaining] = useState(timePerQuestion);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Load questions from JSON file\n    setQuestions(questionsData.questions);\n  }, []);\n  useEffect(() => {\n    // Timer for each question\n    if (timeRemaining > 0) {\n      const timer = setTimeout(() => {\n        setTimeRemaining(timeRemaining - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else {\n      // Time's up, move to next question\n      handleNextQuestion();\n    }\n  }, [timeRemaining]);\n  const handleAnswerSelect = answer => {\n    const newAnswers = [...answers];\n    newAnswers[currentQuestionIndex] = answer;\n    setAnswers(newAnswers);\n  };\n\n  // यहाँ calculateScore function add करें\n  const calculateScore = () => {\n    let calculatedScore = 0;\n    console.log(\"Calculating score...\");\n    questions.forEach((question, index) => {\n      console.log(`Question ${index + 1}:`);\n      console.log(\"Correct answer:\", question.correctAnswer);\n      console.log(\"User answer:\", answers[index]);\n\n      // Trim whitespace and convert to same case for accurate comparison\n      const userAnswer = answers[index] ? answers[index].toString().trim().toLowerCase() : '';\n      const correctAnswer = question.correctAnswer.toString().trim().toLowerCase();\n      console.log(\"Match:\", userAnswer === correctAnswer);\n      if (userAnswer === correctAnswer) {\n        calculatedScore += 1;\n      }\n    });\n    console.log(\"Final score:\", calculatedScore);\n    setScore(calculatedScore);\n    return calculatedScore;\n  };\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setTimeRemaining(timePerQuestion);\n    } else {\n      const finalScore = calculateScore(); // Calculate score\n      navigate('/results', {\n        state: {\n          answers,\n          questions,\n          score: finalScore // Pass the calculated score\n        }\n      });\n    }\n  };\n  const handlePreviousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n      setTimeRemaining(timePerQuestion);\n    }\n  };\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questions.length * 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress,\n      timeRemaining: timeRemaining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Question, {\n      question: currentQuestion,\n      selectedAnswer: answers[currentQuestionIndex],\n      onAnswerSelect: handleAnswerSelect,\n      questionNumber: currentQuestionIndex + 1,\n      totalQuestions: questions.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePreviousQuestion,\n        disabled: currentQuestionIndex === 0,\n        className: \"nav-btn prev-btn\",\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !answers[currentQuestionIndex],\n        className: \"nav-btn next-btn\",\n        children: currentQuestionIndex === questions.length - 1 ? 'Finish' : 'Next'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"bHDGavwikPZuMYIvlE8eiYmkINk=\", false, function () {\n  return [useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Question","ProgressBar","questionsData","jsxDEV","_jsxDEV","QuizPage","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","score","setScore","timePerQuestion","timeRemaining","setTimeRemaining","navigate","timer","setTimeout","clearTimeout","handleNextQuestion","handleAnswerSelect","answer","newAnswers","calculateScore","calculatedScore","console","log","forEach","question","index","correctAnswer","userAnswer","toString","trim","toLowerCase","length","finalScore","state","handlePreviousQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","progress","selectedAnswer","onAnswerSelect","questionNumber","totalQuestions","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/jeetyadav/Downloads/quiz-app-main/src/components/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Question from './Question';\nimport ProgressBar from './ProgressBar';\nimport questionsData from '../questions.json';\nimport './QuizPage.css';\n\nconst QuizPage = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [timePerQuestion] = useState(30);\n  const [timeRemaining, setTimeRemaining] = useState(timePerQuestion);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Load questions from JSON file\n    setQuestions(questionsData.questions);\n  }, []);\n\n  useEffect(() => {\n    // Timer for each question\n    if (timeRemaining > 0) {\n      const timer = setTimeout(() => {\n        setTimeRemaining(timeRemaining - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else {\n      // Time's up, move to next question\n      handleNextQuestion();\n    }\n  }, [timeRemaining]);\n\n  const handleAnswerSelect = (answer) => {\n    const newAnswers = [...answers];\n    newAnswers[currentQuestionIndex] = answer;\n    setAnswers(newAnswers);\n  };\n\n  // यहाँ calculateScore function add करें\n  const calculateScore = () => {\n    let calculatedScore = 0;\n    console.log(\"Calculating score...\");\n    \n    questions.forEach((question, index) => {\n      console.log(`Question ${index + 1}:`);\n      console.log(\"Correct answer:\", question.correctAnswer);\n      console.log(\"User answer:\", answers[index]);\n      \n      // Trim whitespace and convert to same case for accurate comparison\n      const userAnswer = answers[index] ? answers[index].toString().trim().toLowerCase() : '';\n      const correctAnswer = question.correctAnswer.toString().trim().toLowerCase();\n      \n      console.log(\"Match:\", userAnswer === correctAnswer);\n      \n      if (userAnswer === correctAnswer) {\n        calculatedScore += 1;\n      }\n    });\n    \n    console.log(\"Final score:\", calculatedScore);\n    setScore(calculatedScore);\n    return calculatedScore;\n  };\n\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setTimeRemaining(timePerQuestion);\n    } else {\n      const finalScore = calculateScore(); // Calculate score\n      navigate('/results', { \n        state: { \n          answers, \n          questions,\n          score: finalScore // Pass the calculated score\n        } \n      });\n    }\n  };\n\n  const handlePreviousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n      setTimeRemaining(timePerQuestion);\n    }\n  };\n\n  if (questions.length === 0) {\n    return <div className=\"loading\">Loading questions...</div>;\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;\n\n  return (\n    <div className=\"quiz-container\">\n      <ProgressBar progress={progress} timeRemaining={timeRemaining} />\n      \n      <Question\n        question={currentQuestion}\n        selectedAnswer={answers[currentQuestionIndex]}\n        onAnswerSelect={handleAnswerSelect}\n        questionNumber={currentQuestionIndex + 1}\n        totalQuestions={questions.length}\n      />\n      \n      <div className=\"navigation-buttons\">\n        <button \n          onClick={handlePreviousQuestion} \n          disabled={currentQuestionIndex === 0}\n          className=\"nav-btn prev-btn\"\n        >\n          Previous\n        </button>\n        \n        <button \n          onClick={handleNextQuestion} \n          disabled={!answers[currentQuestionIndex]}\n          className=\"nav-btn next-btn\"\n        >\n          {currentQuestionIndex === questions.length - 1 ? 'Finish' : 'Next'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}